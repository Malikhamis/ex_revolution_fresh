# Docker Compose for Ex Revolution
# Complete production stack with all services

version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: exrev-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongo:27017/exrevolution
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-default-secret-change-in-production}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@exrevolution.com}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-Admin@123}
      - CDN_ENABLED=${CDN_ENABLED:-false}
      - CDN_BASE_URL=${CDN_BASE_URL:-}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - app_backups:/app/backups
    depends_on:
      - mongo
      - redis
    networks:
      - exrev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongo:
    image: mongo:6.0
    container_name: exrev-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=exrevolution
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - exrev-network
    command: mongod --auth

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: exrev-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - exrev-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: exrev-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - exrev-network

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: exrev-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - exrev-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: exrev-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - exrev-network
    depends_on:
      - prometheus

  # Log Management with ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: exrev-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - exrev-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.5.0
    container_name: exrev-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - app_logs:/var/log/app:ro
    ports:
      - "5044:5044"
    networks:
      - exrev-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.0
    container_name: exrev-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - exrev-network
    depends_on:
      - elasticsearch

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: exrev-backup
    restart: "no"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongo:27017/exrevolution
    volumes:
      - app_uploads:/app/uploads:ro
      - app_logs:/app/logs:ro
      - app_backups:/app/backups
      - backup_storage:/backups
    networks:
      - exrev-network
    depends_on:
      - mongo
    command: ["node", "scripts/backup-system.js", "create", "daily"]
    profiles:
      - backup

# Named Volumes
volumes:
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  app_backups:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  backup_storage:
    driver: local

# Networks
networks:
  exrev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
